inherit_from: .rubocop_todo.yml

# The behavior of RuboCop can be controlled via the .rubocop.yml
# configuration file. It makes it possible to enable/disable
# certain cops (checks) and to alter their behavior if they accept
# any parameters. The file can be placed either in your home
# directory or in some project directory.
#
# RuboCop will start looking for the configuration file in the directory
# where the inspected file is and continue its way up to the root directory.
#
# See https://github.com/rubocop-hq/rubocop/blob/master/manual/configuration.md
require:
- rubocop-rails
- rubocop-performance

AllCops:
  Exclude:
    - bin/**/*
    - config/**/*
    - config.ru
    - db/**/*
    - Dangerfile
    - Gemfile.lock
    - Guardfile
    - Rakefile
    - spec/fixtures/**/*
    - spec/rails_helper.rb
    - tmp/**/*
    - vendor/**/*
  TargetRubyVersion: 2.6.3

############################################################
## Metrics
############################################################

Metrics/LineLength:
  IgnoreCopDirectives: true
  Max: 120

Metrics/BlockLength:
  Exclude:
    - 'Rakefile'
    - '**/*.rake'
    - 'spec/**/*.rb'

Metrics/ModuleLength:
  Exclude:
    - 'spec/**/*.rb'

############################################################
## Style
############################################################

Style/OptionHash:
  Enabled: true

# Single quotes being faster is hardly measurable and only affects parse time.
# Enforcing double quotes reduces the times where you need to change them
# when introducing an interpolation. Use single quotes only if their semantics
# are needed.
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Check with yard instead.
Style/Documentation:
  Enabled: false


############################################################
## Layout
############################################################

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: false

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable
  AutoCorrect: true

############################################################
## Lint
############################################################

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

############################################################
## Naming
############################################################

# This is just silly. Calling the argument `other` in all cases makes no sense.
Naming/BinaryOperatorParameterName:
  Enabled: false
